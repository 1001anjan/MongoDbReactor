pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script { /// Enclose shell steps within a script block
                   sh 'chmod +x ./buildScripts/build.sh' // Grant execute permission
                    sh './buildScripts/build.sh'
                }
            }
        }


        stage('Test') {
            steps {
                script {
                    sh 'chmod +x ./buildScripts/test.sh' // Grant execute permission
                    sh './buildScripts/test.sh'
                     publishHTML(target: [
                                                allowMissing: false,
                                                alwaysLinkToLastBuild: true,
                                                keepAll     : true,
                                                reportDir: 'build/jacocoHtml/',
                                                reportFiles : 'index.html',
                                                reportName: 'Jacoco Report Merged'
                                              //  filesMatch: '**/jacoco/test/html/**'
                                        ]
                                        )
                    publishHTML(target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll     : true,
                            reportDir: 'build/reports/',
                            reportFiles : 'tests/test/index.html',
                            reportName: 'Unit Tests'
                    ]
                    )
                }
            }
        }

        // Define more stages as needed

        stage('Sonar Analysis') {
                    steps {
                        script { /// Enclose shell steps within a script block
                           sh 'chmod +x ./buildScripts/qa.sh' // Grant execute permission
                            sh './buildScripts/qa.sh'
                        }
                    }
        }

         stage('Dependency Check') {
                            steps {
                                script { /// Enclose shell steps within a script block
                                       sh 'chmod +x ./buildScripts/dependency.sh' // Grant execute permission
                                       sh './buildScripts/dependency.sh'
                                       publishHTML(target: [
                                               allowMissing: false,
                                               alwaysLinkToLastBuild: true,
                                               keepAll     : true,
                                               reportDir: 'build/reports/',
                                               reportFiles : 'dependency-check-report.html',
                                               reportName: 'Dependency Check Report'
                                       ]
                                       )
                                 }
                            }
                }

        stage('Deploy') {
                            steps {
                                script { /// Enclose shell steps within a script block
                                   sh 'chmod +x ./buildScripts/deploy.sh' // Grant execute permission
                                    sh './buildScripts/deploy.sh'
                                }
                            }
                }

        stage('Cleanup') {
            steps {
                script {
                    // Check if the build result is null (successful)
                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        echo "Build succeeded. Running cleanup..."
                        step([$class: 'WsCleanup', cleanWhenFailure: false])
                    } else {
                        echo "Build failed. No cleanup needed."
                    }
                }
            }
        }




    }

     post {
             failure {
                 script {
                     echo "Pipeline failed, marking the build as FAILURE"
                     currentBuild.result = 'FAILURE'
                 }
             }
         }

}